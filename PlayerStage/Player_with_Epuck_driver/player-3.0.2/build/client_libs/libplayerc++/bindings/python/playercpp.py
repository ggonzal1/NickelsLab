# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_playercpp', [dirname(__file__)])
        except ImportError:
            import _playercpp
            return _playercpp
        if fp is not None:
            try:
                _mod = imp.load_module('_playercpp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _playercpp = swig_import_helper()
    del swig_import_helper
else:
    import _playercpp
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _playercpp.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _playercpp.SwigPyIterator_value(self)
    def incr(self, n = 1): return _playercpp.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _playercpp.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _playercpp.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _playercpp.SwigPyIterator_equal(self, *args)
    def copy(self): return _playercpp.SwigPyIterator_copy(self)
    def next(self): return _playercpp.SwigPyIterator_next(self)
    def __next__(self): return _playercpp.SwigPyIterator___next__(self)
    def previous(self): return _playercpp.SwigPyIterator_previous(self)
    def advance(self, *args): return _playercpp.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _playercpp.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _playercpp.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _playercpp.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _playercpp.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _playercpp.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _playercpp.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _playercpp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class thread(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, thread, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, thread, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _playercpp.new_thread()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_thread
    __del__ = lambda self : None;
thread_swigregister = _playercpp.thread_swigregister
thread_swigregister(thread)

class mutex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mutex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mutex, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _playercpp.new_mutex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_mutex
    __del__ = lambda self : None;
mutex_swigregister = _playercpp.mutex_swigregister
mutex_swigregister(mutex)

class PlayerClient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlayerClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlayerClient, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_PlayerClient(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_PlayerClient
    __del__ = lambda self : None;
    def Connected(self): return _playercpp.PlayerClient_Connected(self)
    def StartThread(self): return _playercpp.PlayerClient_StartThread(self)
    def StopThread(self): return _playercpp.PlayerClient_StopThread(self)
    def Run(self, aTimeout = 10): return _playercpp.PlayerClient_Run(self, aTimeout)
    def Stop(self): return _playercpp.PlayerClient_Stop(self)
    def Peek(self, timeout = 0): return _playercpp.PlayerClient_Peek(self, timeout)
    def SetRequestTimeout(self, *args): return _playercpp.PlayerClient_SetRequestTimeout(self, *args)
    def SetRetryLimit(self, *args): return _playercpp.PlayerClient_SetRetryLimit(self, *args)
    def GetRetryLimit(self): return _playercpp.PlayerClient_GetRetryLimit(self)
    def SetRetryTime(self, *args): return _playercpp.PlayerClient_SetRetryTime(self, *args)
    def GetRetryTime(self): return _playercpp.PlayerClient_GetRetryTime(self)
    def Read(self): return _playercpp.PlayerClient_Read(self)
    def ReadIfWaiting(self): return _playercpp.PlayerClient_ReadIfWaiting(self)
    def SetDataMode(self, *args): return _playercpp.PlayerClient_SetDataMode(self, *args)
    def SetReplaceRule(self, *args): return _playercpp.PlayerClient_SetReplaceRule(self, *args)
    def RequestDeviceList(self): return _playercpp.PlayerClient_RequestDeviceList(self)
    def GetDeviceList(self): return _playercpp.PlayerClient_GetDeviceList(self)
    def GetHostname(self): return _playercpp.PlayerClient_GetHostname(self)
    def GetPort(self): return _playercpp.PlayerClient_GetPort(self)
    def LookupCode(self, *args): return _playercpp.PlayerClient_LookupCode(self, *args)
    def LookupName(self, *args): return _playercpp.PlayerClient_LookupName(self, *args)
    def GetOverflowCount(self): return _playercpp.PlayerClient_GetOverflowCount(self)
PlayerClient_swigregister = _playercpp.PlayerClient_swigregister
PlayerClient_swigregister(PlayerClient)

class ClientProxy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClientProxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClientProxy, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def IsValid(self): return _playercpp.ClientProxy_IsValid(self)
    def IsFresh(self): return _playercpp.ClientProxy_IsFresh(self)
    def NotFresh(self): return _playercpp.ClientProxy_NotFresh(self)
    def GetDriverName(self): return _playercpp.ClientProxy_GetDriverName(self)
    def GetDataTime(self): return _playercpp.ClientProxy_GetDataTime(self)
    def GetElapsedTime(self): return _playercpp.ClientProxy_GetElapsedTime(self)
    def GetPlayerClient(self): return _playercpp.ClientProxy_GetPlayerClient(self)
    def GetIndex(self): return _playercpp.ClientProxy_GetIndex(self)
    def GetInterface(self): return _playercpp.ClientProxy_GetInterface(self)
    def GetInterfaceStr(self): return _playercpp.ClientProxy_GetInterfaceStr(self)
    def SetReplaceRule(self, *args): return _playercpp.ClientProxy_SetReplaceRule(self, *args)
    def HasCapability(self, *args): return _playercpp.ClientProxy_HasCapability(self, *args)
    def GetBoolProp(self, *args): return _playercpp.ClientProxy_GetBoolProp(self, *args)
    def SetBoolProp(self, *args): return _playercpp.ClientProxy_SetBoolProp(self, *args)
    def GetIntProp(self, *args): return _playercpp.ClientProxy_GetIntProp(self, *args)
    def SetIntProp(self, *args): return _playercpp.ClientProxy_SetIntProp(self, *args)
    def GetDblProp(self, *args): return _playercpp.ClientProxy_GetDblProp(self, *args)
    def SetDblProp(self, *args): return _playercpp.ClientProxy_SetDblProp(self, *args)
    def GetStrProp(self, *args): return _playercpp.ClientProxy_GetStrProp(self, *args)
    def SetStrProp(self, *args): return _playercpp.ClientProxy_SetStrProp(self, *args)
ClientProxy_swigregister = _playercpp.ClientProxy_swigregister
ClientProxy_swigregister(ClientProxy)

class ActArrayProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActArrayProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ActArrayProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_ActArrayProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_ActArrayProxy
    __del__ = lambda self : None;
    def RequestGeometry(self): return _playercpp.ActArrayProxy_RequestGeometry(self)
    def SetPowerConfig(self, *args): return _playercpp.ActArrayProxy_SetPowerConfig(self, *args)
    def SetBrakesConfig(self, *args): return _playercpp.ActArrayProxy_SetBrakesConfig(self, *args)
    def SetSpeedConfig(self, *args): return _playercpp.ActArrayProxy_SetSpeedConfig(self, *args)
    def MoveTo(self, *args): return _playercpp.ActArrayProxy_MoveTo(self, *args)
    def MoveToMulti(self, *args): return _playercpp.ActArrayProxy_MoveToMulti(self, *args)
    def MoveAtSpeed(self, *args): return _playercpp.ActArrayProxy_MoveAtSpeed(self, *args)
    def MoveAtSpeedMulti(self, *args): return _playercpp.ActArrayProxy_MoveAtSpeedMulti(self, *args)
    def MoveHome(self, *args): return _playercpp.ActArrayProxy_MoveHome(self, *args)
    def SetActuatorCurrent(self, *args): return _playercpp.ActArrayProxy_SetActuatorCurrent(self, *args)
    def SetActuatorCurrentMulti(self, *args): return _playercpp.ActArrayProxy_SetActuatorCurrentMulti(self, *args)
    def GetCount(self): return _playercpp.ActArrayProxy_GetCount(self)
    def GetActuatorData(self, *args): return _playercpp.ActArrayProxy_GetActuatorData(self, *args)
    def GetActuatorGeom(self, *args): return _playercpp.ActArrayProxy_GetActuatorGeom(self, *args)
    def GetBasePos(self): return _playercpp.ActArrayProxy_GetBasePos(self)
    def GetBaseOrientation(self): return _playercpp.ActArrayProxy_GetBaseOrientation(self)
ActArrayProxy_swigregister = _playercpp.ActArrayProxy_swigregister
ActArrayProxy_swigregister(ActArrayProxy)

class AioProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AioProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AioProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_AioProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_AioProxy
    __del__ = lambda self : None;
    def GetCount(self): return _playercpp.AioProxy_GetCount(self)
    def GetVoltage(self, *args): return _playercpp.AioProxy_GetVoltage(self, *args)
    def SetVoltage(self, *args): return _playercpp.AioProxy_SetVoltage(self, *args)
AioProxy_swigregister = _playercpp.AioProxy_swigregister
AioProxy_swigregister(AioProxy)

class AudioProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudioProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AudioProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_AudioProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_AudioProxy
    __del__ = lambda self : None;
    def GetMixerDetailsCount(self): return _playercpp.AudioProxy_GetMixerDetailsCount(self)
    def GetDefaultOutputChannel(self): return _playercpp.AudioProxy_GetDefaultOutputChannel(self)
    def GetDefaultInputChannel(self): return _playercpp.AudioProxy_GetDefaultInputChannel(self)
    def GetWavDataLength(self): return _playercpp.AudioProxy_GetWavDataLength(self)
    def GetWavData(self, *args): return _playercpp.AudioProxy_GetWavData(self, *args)
    def GetSeqCount(self): return _playercpp.AudioProxy_GetSeqCount(self)
    def GetSeqItem(self, *args): return _playercpp.AudioProxy_GetSeqItem(self, *args)
    def GetChannelCount(self): return _playercpp.AudioProxy_GetChannelCount(self)
    def GetChannel(self, *args): return _playercpp.AudioProxy_GetChannel(self, *args)
    def GetState(self): return _playercpp.AudioProxy_GetState(self)
    def PlayWav(self, *args): return _playercpp.AudioProxy_PlayWav(self, *args)
    def SetWavStremRec(self, *args): return _playercpp.AudioProxy_SetWavStremRec(self, *args)
    def PlaySample(self, *args): return _playercpp.AudioProxy_PlaySample(self, *args)
    def PlaySeq(self, *args): return _playercpp.AudioProxy_PlaySeq(self, *args)
    def SetMultMixerLevels(self, *args): return _playercpp.AudioProxy_SetMultMixerLevels(self, *args)
    def SetMixerLevel(self, *args): return _playercpp.AudioProxy_SetMixerLevel(self, *args)
    def RecordWav(self): return _playercpp.AudioProxy_RecordWav(self)
    def LoadSample(self, *args): return _playercpp.AudioProxy_LoadSample(self, *args)
    def GetSample(self, *args): return _playercpp.AudioProxy_GetSample(self, *args)
    def RecordSample(self, *args): return _playercpp.AudioProxy_RecordSample(self, *args)
    def GetMixerLevels(self): return _playercpp.AudioProxy_GetMixerLevels(self)
    def GetMixerDetails(self, *args): return _playercpp.AudioProxy_GetMixerDetails(self, *args)
AudioProxy_swigregister = _playercpp.AudioProxy_swigregister
AudioProxy_swigregister(AudioProxy)

class BlackBoardProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackBoardProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlackBoardProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_BlackBoardProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_BlackBoardProxy
    __del__ = lambda self : None;
    def SubscribeToKey(self, *args): return _playercpp.BlackBoardProxy_SubscribeToKey(self, *args)
    def UnsubscribeFromKey(self, *args): return _playercpp.BlackBoardProxy_UnsubscribeFromKey(self, *args)
    def SubscribeToGroup(self, *args): return _playercpp.BlackBoardProxy_SubscribeToGroup(self, *args)
    def UnsubscribeFromGroup(self, *args): return _playercpp.BlackBoardProxy_UnsubscribeFromGroup(self, *args)
    def SetEntry(self, *args): return _playercpp.BlackBoardProxy_SetEntry(self, *args)
    def GetEntry(self, *args): return _playercpp.BlackBoardProxy_GetEntry(self, *args)
    def SetEventHandler(self, *args): return _playercpp.BlackBoardProxy_SetEventHandler(self, *args)
BlackBoardProxy_swigregister = _playercpp.BlackBoardProxy_swigregister
BlackBoardProxy_swigregister(BlackBoardProxy)

class BlobfinderProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlobfinderProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlobfinderProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_BlobfinderProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_BlobfinderProxy
    __del__ = lambda self : None;
    def GetCount(self): return _playercpp.BlobfinderProxy_GetCount(self)
    def GetBlob(self, *args): return _playercpp.BlobfinderProxy_GetBlob(self, *args)
    def GetWidth(self): return _playercpp.BlobfinderProxy_GetWidth(self)
    def GetHeight(self): return _playercpp.BlobfinderProxy_GetHeight(self)
BlobfinderProxy_swigregister = _playercpp.BlobfinderProxy_swigregister
BlobfinderProxy_swigregister(BlobfinderProxy)

class BumperProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BumperProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BumperProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_BumperProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_BumperProxy
    __del__ = lambda self : None;
    def GetCount(self): return _playercpp.BumperProxy_GetCount(self)
    def IsBumped(self, *args): return _playercpp.BumperProxy_IsBumped(self, *args)
    def IsAnyBumped(self): return _playercpp.BumperProxy_IsAnyBumped(self)
    def RequestBumperConfig(self): return _playercpp.BumperProxy_RequestBumperConfig(self)
    def GetPoseCount(self): return _playercpp.BumperProxy_GetPoseCount(self)
    def GetPose(self, *args): return _playercpp.BumperProxy_GetPose(self, *args)
BumperProxy_swigregister = _playercpp.BumperProxy_swigregister
BumperProxy_swigregister(BumperProxy)

class CameraProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CameraProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CameraProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_CameraProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_CameraProxy
    __del__ = lambda self : None;
    def SaveFrame(self, *args): return _playercpp.CameraProxy_SaveFrame(self, *args)
    def Decompress(self): return _playercpp.CameraProxy_Decompress(self)
    def GetDepth(self): return _playercpp.CameraProxy_GetDepth(self)
    def GetWidth(self): return _playercpp.CameraProxy_GetWidth(self)
    def GetHeight(self): return _playercpp.CameraProxy_GetHeight(self)
    def GetFormat(self): return _playercpp.CameraProxy_GetFormat(self)
    def GetImageSize(self): return _playercpp.CameraProxy_GetImageSize(self)
    def GetImage(self, *args): return _playercpp.CameraProxy_GetImage(self, *args)
    def GetCompression(self): return _playercpp.CameraProxy_GetCompression(self)
CameraProxy_swigregister = _playercpp.CameraProxy_swigregister
CameraProxy_swigregister(CameraProxy)

class DioProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DioProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DioProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_DioProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_DioProxy
    __del__ = lambda self : None;
    def GetCount(self): return _playercpp.DioProxy_GetCount(self)
    def GetDigin(self): return _playercpp.DioProxy_GetDigin(self)
    def GetInput(self, *args): return _playercpp.DioProxy_GetInput(self, *args)
    def SetOutput(self, *args): return _playercpp.DioProxy_SetOutput(self, *args)
DioProxy_swigregister = _playercpp.DioProxy_swigregister
DioProxy_swigregister(DioProxy)

class FiducialProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FiducialProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FiducialProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_FiducialProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_FiducialProxy
    __del__ = lambda self : None;
    def GetCount(self): return _playercpp.FiducialProxy_GetCount(self)
    def GetFiducialItem(self, *args): return _playercpp.FiducialProxy_GetFiducialItem(self, *args)
    def GetSensorPose(self): return _playercpp.FiducialProxy_GetSensorPose(self)
    def GetSensorSize(self): return _playercpp.FiducialProxy_GetSensorSize(self)
    def GetFiducialSize(self): return _playercpp.FiducialProxy_GetFiducialSize(self)
    def RequestGeometry(self): return _playercpp.FiducialProxy_RequestGeometry(self)
FiducialProxy_swigregister = _playercpp.FiducialProxy_swigregister
FiducialProxy_swigregister(FiducialProxy)

class GpsProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GpsProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GpsProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_GpsProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_GpsProxy
    __del__ = lambda self : None;
    def GetLatitude(self): return _playercpp.GpsProxy_GetLatitude(self)
    def GetLongitude(self): return _playercpp.GpsProxy_GetLongitude(self)
    def GetAltitude(self): return _playercpp.GpsProxy_GetAltitude(self)
    def GetSatellites(self): return _playercpp.GpsProxy_GetSatellites(self)
    def GetQuality(self): return _playercpp.GpsProxy_GetQuality(self)
    def GetHdop(self): return _playercpp.GpsProxy_GetHdop(self)
    def GetVdop(self): return _playercpp.GpsProxy_GetVdop(self)
    def GetUtmEasting(self): return _playercpp.GpsProxy_GetUtmEasting(self)
    def GetUtmNorthing(self): return _playercpp.GpsProxy_GetUtmNorthing(self)
    def GetTime(self): return _playercpp.GpsProxy_GetTime(self)
    def GetErrHorizontal(self): return _playercpp.GpsProxy_GetErrHorizontal(self)
    def GetErrVertical(self): return _playercpp.GpsProxy_GetErrVertical(self)
GpsProxy_swigregister = _playercpp.GpsProxy_swigregister
GpsProxy_swigregister(GpsProxy)

class Graphics2dProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Graphics2dProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Graphics2dProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_Graphics2dProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_Graphics2dProxy
    __del__ = lambda self : None;
    def Color(self, *args): return _playercpp.Graphics2dProxy_Color(self, *args)
    def Clear(self): return _playercpp.Graphics2dProxy_Clear(self)
    def DrawPoints(self, *args): return _playercpp.Graphics2dProxy_DrawPoints(self, *args)
    def DrawPolygon(self, *args): return _playercpp.Graphics2dProxy_DrawPolygon(self, *args)
    def DrawPolyline(self, *args): return _playercpp.Graphics2dProxy_DrawPolyline(self, *args)
Graphics2dProxy_swigregister = _playercpp.Graphics2dProxy_swigregister
Graphics2dProxy_swigregister(Graphics2dProxy)

class Graphics3dProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Graphics3dProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Graphics3dProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_Graphics3dProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_Graphics3dProxy
    __del__ = lambda self : None;
    def Color(self, *args): return _playercpp.Graphics3dProxy_Color(self, *args)
    def Clear(self): return _playercpp.Graphics3dProxy_Clear(self)
    def Draw(self, *args): return _playercpp.Graphics3dProxy_Draw(self, *args)
Graphics3dProxy_swigregister = _playercpp.Graphics3dProxy_swigregister
Graphics3dProxy_swigregister(Graphics3dProxy)

class GripperProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GripperProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GripperProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_GripperProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_GripperProxy
    __del__ = lambda self : None;
    def RequestGeometry(self): return _playercpp.GripperProxy_RequestGeometry(self)
    def GetState(self): return _playercpp.GripperProxy_GetState(self)
    def GetBeams(self): return _playercpp.GripperProxy_GetBeams(self)
    def GetPose(self): return _playercpp.GripperProxy_GetPose(self)
    def GetOuterSize(self): return _playercpp.GripperProxy_GetOuterSize(self)
    def GetInnerSize(self): return _playercpp.GripperProxy_GetInnerSize(self)
    def GetNumBeams(self): return _playercpp.GripperProxy_GetNumBeams(self)
    def GetCapacity(self): return _playercpp.GripperProxy_GetCapacity(self)
    def GetStored(self): return _playercpp.GripperProxy_GetStored(self)
    def Open(self): return _playercpp.GripperProxy_Open(self)
    def Close(self): return _playercpp.GripperProxy_Close(self)
    def Stop(self): return _playercpp.GripperProxy_Stop(self)
    def Store(self): return _playercpp.GripperProxy_Store(self)
    def Retrieve(self): return _playercpp.GripperProxy_Retrieve(self)
GripperProxy_swigregister = _playercpp.GripperProxy_swigregister
GripperProxy_swigregister(GripperProxy)

class HealthProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HealthProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HealthProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_HealthProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_HealthProxy
    __del__ = lambda self : None;
    def GetIdleCPU(self): return _playercpp.HealthProxy_GetIdleCPU(self)
    def GetSystemCPU(self): return _playercpp.HealthProxy_GetSystemCPU(self)
    def GetUserCPU(self): return _playercpp.HealthProxy_GetUserCPU(self)
    def GetMemTotal(self): return _playercpp.HealthProxy_GetMemTotal(self)
    def GetMemUsed(self): return _playercpp.HealthProxy_GetMemUsed(self)
    def GetMemFree(self): return _playercpp.HealthProxy_GetMemFree(self)
    def GetSwapTotal(self): return _playercpp.HealthProxy_GetSwapTotal(self)
    def GetSwapUsed(self): return _playercpp.HealthProxy_GetSwapUsed(self)
    def GetSwapFree(self): return _playercpp.HealthProxy_GetSwapFree(self)
    def GetPercMemUsed(self): return _playercpp.HealthProxy_GetPercMemUsed(self)
    def GetPercSwapUsed(self): return _playercpp.HealthProxy_GetPercSwapUsed(self)
    def GetPercTotalUsed(self): return _playercpp.HealthProxy_GetPercTotalUsed(self)
HealthProxy_swigregister = _playercpp.HealthProxy_swigregister
HealthProxy_swigregister(HealthProxy)

class ImuProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImuProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImuProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_ImuProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_ImuProxy
    __del__ = lambda self : None;
    def GetPose(self): return _playercpp.ImuProxy_GetPose(self)
    def GetXAccel(self): return _playercpp.ImuProxy_GetXAccel(self)
    def GetYAccel(self): return _playercpp.ImuProxy_GetYAccel(self)
    def GetZAccel(self): return _playercpp.ImuProxy_GetZAccel(self)
    def GetXGyro(self): return _playercpp.ImuProxy_GetXGyro(self)
    def GetYGyro(self): return _playercpp.ImuProxy_GetYGyro(self)
    def GetZGyro(self): return _playercpp.ImuProxy_GetZGyro(self)
    def GetXMagn(self): return _playercpp.ImuProxy_GetXMagn(self)
    def GetYMagn(self): return _playercpp.ImuProxy_GetYMagn(self)
    def GetZMagn(self): return _playercpp.ImuProxy_GetZMagn(self)
    def GetRawValues(self): return _playercpp.ImuProxy_GetRawValues(self)
    def SetDatatype(self, *args): return _playercpp.ImuProxy_SetDatatype(self, *args)
    def ResetOrientation(self, *args): return _playercpp.ImuProxy_ResetOrientation(self, *args)
ImuProxy_swigregister = _playercpp.ImuProxy_swigregister
ImuProxy_swigregister(ImuProxy)

class IrProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IrProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IrProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_IrProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_IrProxy
    __del__ = lambda self : None;
    def GetCount(self): return _playercpp.IrProxy_GetCount(self)
    def GetRange(self, *args): return _playercpp.IrProxy_GetRange(self, *args)
    def GetVoltage(self, *args): return _playercpp.IrProxy_GetVoltage(self, *args)
    def GetPoseCount(self): return _playercpp.IrProxy_GetPoseCount(self)
    def GetPose(self, *args): return _playercpp.IrProxy_GetPose(self, *args)
    def RequestGeom(self): return _playercpp.IrProxy_RequestGeom(self)
IrProxy_swigregister = _playercpp.IrProxy_swigregister
IrProxy_swigregister(IrProxy)

class LaserProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LaserProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LaserProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_LaserProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_LaserProxy
    __del__ = lambda self : None;
    def GetCount(self): return _playercpp.LaserProxy_GetCount(self)
    def GetMaxRange(self): return _playercpp.LaserProxy_GetMaxRange(self)
    def GetScanRes(self): return _playercpp.LaserProxy_GetScanRes(self)
    def GetRangeRes(self): return _playercpp.LaserProxy_GetRangeRes(self)
    def GetScanningFrequency(self): return _playercpp.LaserProxy_GetScanningFrequency(self)
    def GetMinAngle(self): return _playercpp.LaserProxy_GetMinAngle(self)
    def GetMaxAngle(self): return _playercpp.LaserProxy_GetMaxAngle(self)
    def GetConfMinAngle(self): return _playercpp.LaserProxy_GetConfMinAngle(self)
    def GetConfMaxAngle(self): return _playercpp.LaserProxy_GetConfMaxAngle(self)
    def IntensityOn(self): return _playercpp.LaserProxy_IntensityOn(self)
    def GetPoint(self, *args): return _playercpp.LaserProxy_GetPoint(self, *args)
    def GetRange(self, *args): return _playercpp.LaserProxy_GetRange(self, *args)
    def GetBearing(self, *args): return _playercpp.LaserProxy_GetBearing(self, *args)
    def GetIntensity(self, *args): return _playercpp.LaserProxy_GetIntensity(self, *args)
    def GetID(self): return _playercpp.LaserProxy_GetID(self)
    def Configure(self, *args): return _playercpp.LaserProxy_Configure(self, *args)
    def RequestConfigure(self): return _playercpp.LaserProxy_RequestConfigure(self)
    def RequestID(self): return _playercpp.LaserProxy_RequestID(self)
    def RequestGeom(self): return _playercpp.LaserProxy_RequestGeom(self)
    def GetPose(self): return _playercpp.LaserProxy_GetPose(self)
    def GetRobotPose(self): return _playercpp.LaserProxy_GetRobotPose(self)
    def GetSize(self): return _playercpp.LaserProxy_GetSize(self)
    def GetMinLeft(self): return _playercpp.LaserProxy_GetMinLeft(self)
    def GetMinRight(self): return _playercpp.LaserProxy_GetMinRight(self)
    def MinLeft(self): return _playercpp.LaserProxy_MinLeft(self)
    def MinRight(self): return _playercpp.LaserProxy_MinRight(self)
LaserProxy_swigregister = _playercpp.LaserProxy_swigregister
LaserProxy_swigregister(LaserProxy)

class LimbProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LimbProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LimbProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_LimbProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_LimbProxy
    __del__ = lambda self : None;
    def RequestGeometry(self): return _playercpp.LimbProxy_RequestGeometry(self)
    def SetPowerConfig(self, *args): return _playercpp.LimbProxy_SetPowerConfig(self, *args)
    def SetBrakesConfig(self, *args): return _playercpp.LimbProxy_SetBrakesConfig(self, *args)
    def SetSpeedConfig(self, *args): return _playercpp.LimbProxy_SetSpeedConfig(self, *args)
    def MoveHome(self): return _playercpp.LimbProxy_MoveHome(self)
    def Stop(self): return _playercpp.LimbProxy_Stop(self)
    def SetPose(self, *args): return _playercpp.LimbProxy_SetPose(self, *args)
    def SetPosition(self, *args): return _playercpp.LimbProxy_SetPosition(self, *args)
    def VectorMove(self, *args): return _playercpp.LimbProxy_VectorMove(self, *args)
    def GetData(self): return _playercpp.LimbProxy_GetData(self)
    def GetGeom(self): return _playercpp.LimbProxy_GetGeom(self)
LimbProxy_swigregister = _playercpp.LimbProxy_swigregister
LimbProxy_swigregister(LimbProxy)

class LinuxjoystickProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinuxjoystickProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinuxjoystickProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_LinuxjoystickProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_LinuxjoystickProxy
    __del__ = lambda self : None;
    def GetButtons(self): return _playercpp.LinuxjoystickProxy_GetButtons(self)
    def GetAxes(self, *args): return _playercpp.LinuxjoystickProxy_GetAxes(self, *args)
    def GetAxesCount(self): return _playercpp.LinuxjoystickProxy_GetAxesCount(self)
LinuxjoystickProxy_swigregister = _playercpp.LinuxjoystickProxy_swigregister
LinuxjoystickProxy_swigregister(LinuxjoystickProxy)

class LocalizeProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalizeProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocalizeProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_LocalizeProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_LocalizeProxy
    __del__ = lambda self : None;
    def GetMapSizeX(self): return _playercpp.LocalizeProxy_GetMapSizeX(self)
    def GetMapSizeY(self): return _playercpp.LocalizeProxy_GetMapSizeY(self)
    def GetMapTileX(self): return _playercpp.LocalizeProxy_GetMapTileX(self)
    def GetMapTileY(self): return _playercpp.LocalizeProxy_GetMapTileY(self)
    def GetMapScale(self): return _playercpp.LocalizeProxy_GetMapScale(self)
    def GetPendingCount(self): return _playercpp.LocalizeProxy_GetPendingCount(self)
    def GetHypothCount(self): return _playercpp.LocalizeProxy_GetHypothCount(self)
    def GetHypoth(self, *args): return _playercpp.LocalizeProxy_GetHypoth(self, *args)
    def GetParticles(self): return _playercpp.LocalizeProxy_GetParticles(self)
    def GetParticlePose(self, *args): return _playercpp.LocalizeProxy_GetParticlePose(self, *args)
    def SetPose(self, *args): return _playercpp.LocalizeProxy_SetPose(self, *args)
    def GetNumHypoths(self): return _playercpp.LocalizeProxy_GetNumHypoths(self)
    def GetNumParticles(self): return _playercpp.LocalizeProxy_GetNumParticles(self)
LocalizeProxy_swigregister = _playercpp.LocalizeProxy_swigregister
LocalizeProxy_swigregister(LocalizeProxy)

class LogProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LogProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_LogProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_LogProxy
    __del__ = lambda self : None;
    def GetType(self): return _playercpp.LogProxy_GetType(self)
    def GetState(self): return _playercpp.LogProxy_GetState(self)
    def QueryState(self): return _playercpp.LogProxy_QueryState(self)
    def SetState(self, *args): return _playercpp.LogProxy_SetState(self, *args)
    def SetWriteState(self, *args): return _playercpp.LogProxy_SetWriteState(self, *args)
    def SetReadState(self, *args): return _playercpp.LogProxy_SetReadState(self, *args)
    def Rewind(self): return _playercpp.LogProxy_Rewind(self)
    def SetFilename(self, *args): return _playercpp.LogProxy_SetFilename(self, *args)
LogProxy_swigregister = _playercpp.LogProxy_swigregister
LogProxy_swigregister(LogProxy)

class MapProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MapProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_MapProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_MapProxy
    __del__ = lambda self : None;
    def RequestMap(self): return _playercpp.MapProxy_RequestMap(self)
    def GetCellIndex(self, *args): return _playercpp.MapProxy_GetCellIndex(self, *args)
    def GetCell(self, *args): return _playercpp.MapProxy_GetCell(self, *args)
    def GetResolution(self): return _playercpp.MapProxy_GetResolution(self)
    def GetWidth(self): return _playercpp.MapProxy_GetWidth(self)
    def GetHeight(self): return _playercpp.MapProxy_GetHeight(self)
    def GetOriginX(self): return _playercpp.MapProxy_GetOriginX(self)
    def GetOriginY(self): return _playercpp.MapProxy_GetOriginY(self)
    def GetMap(self, *args): return _playercpp.MapProxy_GetMap(self, *args)
MapProxy_swigregister = _playercpp.MapProxy_swigregister
MapProxy_swigregister(MapProxy)

class OpaqueProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpaqueProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OpaqueProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_OpaqueProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_OpaqueProxy
    __del__ = lambda self : None;
    def GetCount(self): return _playercpp.OpaqueProxy_GetCount(self)
    def GetData(self, *args): return _playercpp.OpaqueProxy_GetData(self, *args)
    def SendCmd(self, *args): return _playercpp.OpaqueProxy_SendCmd(self, *args)
    def SendReq(self, *args): return _playercpp.OpaqueProxy_SendReq(self, *args)
OpaqueProxy_swigregister = _playercpp.OpaqueProxy_swigregister
OpaqueProxy_swigregister(OpaqueProxy)

class PlannerProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlannerProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlannerProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_PlannerProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_PlannerProxy
    __del__ = lambda self : None;
    def SetGoalPose(self, *args): return _playercpp.PlannerProxy_SetGoalPose(self, *args)
    def RequestWaypoints(self): return _playercpp.PlannerProxy_RequestWaypoints(self)
    def SetEnable(self, *args): return _playercpp.PlannerProxy_SetEnable(self, *args)
    def GetPathValid(self): return _playercpp.PlannerProxy_GetPathValid(self)
    def GetPathDone(self): return _playercpp.PlannerProxy_GetPathDone(self)
    def GetPx(self): return _playercpp.PlannerProxy_GetPx(self)
    def GetPy(self): return _playercpp.PlannerProxy_GetPy(self)
    def GetPa(self): return _playercpp.PlannerProxy_GetPa(self)
    def GetPose(self): return _playercpp.PlannerProxy_GetPose(self)
    def GetGx(self): return _playercpp.PlannerProxy_GetGx(self)
    def GetGy(self): return _playercpp.PlannerProxy_GetGy(self)
    def GetGa(self): return _playercpp.PlannerProxy_GetGa(self)
    def GetGoal(self): return _playercpp.PlannerProxy_GetGoal(self)
    def GetWx(self): return _playercpp.PlannerProxy_GetWx(self)
    def GetWy(self): return _playercpp.PlannerProxy_GetWy(self)
    def GetWa(self): return _playercpp.PlannerProxy_GetWa(self)
    def GetCurrentWaypoint(self): return _playercpp.PlannerProxy_GetCurrentWaypoint(self)
    def GetIx(self, *args): return _playercpp.PlannerProxy_GetIx(self, *args)
    def GetIy(self, *args): return _playercpp.PlannerProxy_GetIy(self, *args)
    def GetIa(self, *args): return _playercpp.PlannerProxy_GetIa(self, *args)
    def GetWaypoint(self, *args): return _playercpp.PlannerProxy_GetWaypoint(self, *args)
    def GetCurrentWaypointId(self): return _playercpp.PlannerProxy_GetCurrentWaypointId(self)
    def GetWaypointCount(self): return _playercpp.PlannerProxy_GetWaypointCount(self)
PlannerProxy_swigregister = _playercpp.PlannerProxy_swigregister
PlannerProxy_swigregister(PlannerProxy)

class Pointcloud3dProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pointcloud3dProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pointcloud3dProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_Pointcloud3dProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_Pointcloud3dProxy
    __del__ = lambda self : None;
    def GetCount(self): return _playercpp.Pointcloud3dProxy_GetCount(self)
    def GetPoint(self, *args): return _playercpp.Pointcloud3dProxy_GetPoint(self, *args)
Pointcloud3dProxy_swigregister = _playercpp.Pointcloud3dProxy_swigregister
Pointcloud3dProxy_swigregister(Pointcloud3dProxy)

class Position1dProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Position1dProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Position1dProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_Position1dProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_Position1dProxy
    __del__ = lambda self : None;
    def SetSpeed(self, *args): return _playercpp.Position1dProxy_SetSpeed(self, *args)
    def GoTo(self, *args): return _playercpp.Position1dProxy_GoTo(self, *args)
    def RequestGeom(self): return _playercpp.Position1dProxy_RequestGeom(self)
    def GetPose(self): return _playercpp.Position1dProxy_GetPose(self)
    def GetSize(self): return _playercpp.Position1dProxy_GetSize(self)
    def SetMotorEnable(self, *args): return _playercpp.Position1dProxy_SetMotorEnable(self, *args)
    def SetOdometry(self, *args): return _playercpp.Position1dProxy_SetOdometry(self, *args)
    def ResetOdometry(self): return _playercpp.Position1dProxy_ResetOdometry(self)
    def GetPos(self): return _playercpp.Position1dProxy_GetPos(self)
    def GetVel(self): return _playercpp.Position1dProxy_GetVel(self)
    def GetStall(self): return _playercpp.Position1dProxy_GetStall(self)
    def GetStatus(self): return _playercpp.Position1dProxy_GetStatus(self)
    def IsLimitMin(self): return _playercpp.Position1dProxy_IsLimitMin(self)
    def IsLimitCen(self): return _playercpp.Position1dProxy_IsLimitCen(self)
    def IsLimitMax(self): return _playercpp.Position1dProxy_IsLimitMax(self)
    def IsOverCurrent(self): return _playercpp.Position1dProxy_IsOverCurrent(self)
    def IsTrajComplete(self): return _playercpp.Position1dProxy_IsTrajComplete(self)
    def IsEnabled(self): return _playercpp.Position1dProxy_IsEnabled(self)
Position1dProxy_swigregister = _playercpp.Position1dProxy_swigregister
Position1dProxy_swigregister(Position1dProxy)

class Position2dProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Position2dProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Position2dProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_Position2dProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_Position2dProxy
    __del__ = lambda self : None;
    def SetSpeed(self, *args): return _playercpp.Position2dProxy_SetSpeed(self, *args)
    def SetVelHead(self, *args): return _playercpp.Position2dProxy_SetVelHead(self, *args)
    def GoTo(self, *args): return _playercpp.Position2dProxy_GoTo(self, *args)
    def SetCarlike(self, *args): return _playercpp.Position2dProxy_SetCarlike(self, *args)
    def RequestGeom(self): return _playercpp.Position2dProxy_RequestGeom(self)
    def GetOffset(self): return _playercpp.Position2dProxy_GetOffset(self)
    def GetSize(self): return _playercpp.Position2dProxy_GetSize(self)
    def SetMotorEnable(self, *args): return _playercpp.Position2dProxy_SetMotorEnable(self, *args)
    def ResetOdometry(self): return _playercpp.Position2dProxy_ResetOdometry(self)
    def SetOdometry(self, *args): return _playercpp.Position2dProxy_SetOdometry(self, *args)
    def GetXPos(self): return _playercpp.Position2dProxy_GetXPos(self)
    def GetYPos(self): return _playercpp.Position2dProxy_GetYPos(self)
    def GetYaw(self): return _playercpp.Position2dProxy_GetYaw(self)
    def GetXSpeed(self): return _playercpp.Position2dProxy_GetXSpeed(self)
    def GetYSpeed(self): return _playercpp.Position2dProxy_GetYSpeed(self)
    def GetYawSpeed(self): return _playercpp.Position2dProxy_GetYawSpeed(self)
    def GetStall(self): return _playercpp.Position2dProxy_GetStall(self)
Position2dProxy_swigregister = _playercpp.Position2dProxy_swigregister
Position2dProxy_swigregister(Position2dProxy)

class Position3dProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Position3dProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Position3dProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_Position3dProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_Position3dProxy
    __del__ = lambda self : None;
    def SetSpeed(self, *args): return _playercpp.Position3dProxy_SetSpeed(self, *args)
    def GoTo(self, *args): return _playercpp.Position3dProxy_GoTo(self, *args)
    def SetMotorEnable(self, *args): return _playercpp.Position3dProxy_SetMotorEnable(self, *args)
    def SelectVelocityControl(self, *args): return _playercpp.Position3dProxy_SelectVelocityControl(self, *args)
    def ResetOdometry(self): return _playercpp.Position3dProxy_ResetOdometry(self)
    def SetOdometry(self, *args): return _playercpp.Position3dProxy_SetOdometry(self, *args)
    def RequestGeom(self): return _playercpp.Position3dProxy_RequestGeom(self)
    def GetXPos(self): return _playercpp.Position3dProxy_GetXPos(self)
    def GetYPos(self): return _playercpp.Position3dProxy_GetYPos(self)
    def GetZPos(self): return _playercpp.Position3dProxy_GetZPos(self)
    def GetRoll(self): return _playercpp.Position3dProxy_GetRoll(self)
    def GetPitch(self): return _playercpp.Position3dProxy_GetPitch(self)
    def GetYaw(self): return _playercpp.Position3dProxy_GetYaw(self)
    def GetXSpeed(self): return _playercpp.Position3dProxy_GetXSpeed(self)
    def GetYSpeed(self): return _playercpp.Position3dProxy_GetYSpeed(self)
    def GetZSpeed(self): return _playercpp.Position3dProxy_GetZSpeed(self)
    def GetRollSpeed(self): return _playercpp.Position3dProxy_GetRollSpeed(self)
    def GetPitchSpeed(self): return _playercpp.Position3dProxy_GetPitchSpeed(self)
    def GetYawSpeed(self): return _playercpp.Position3dProxy_GetYawSpeed(self)
    def GetStall(self): return _playercpp.Position3dProxy_GetStall(self)
Position3dProxy_swigregister = _playercpp.Position3dProxy_swigregister
Position3dProxy_swigregister(Position3dProxy)

class PowerProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PowerProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PowerProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_PowerProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_PowerProxy
    __del__ = lambda self : None;
    def GetCharge(self): return _playercpp.PowerProxy_GetCharge(self)
    def GetPercent(self): return _playercpp.PowerProxy_GetPercent(self)
    def GetJoules(self): return _playercpp.PowerProxy_GetJoules(self)
    def GetWatts(self): return _playercpp.PowerProxy_GetWatts(self)
    def GetCharging(self): return _playercpp.PowerProxy_GetCharging(self)
    def IsValid(self): return _playercpp.PowerProxy_IsValid(self)
PowerProxy_swigregister = _playercpp.PowerProxy_swigregister
PowerProxy_swigregister(PowerProxy)

class PtzProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PtzProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PtzProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_PtzProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_PtzProxy
    __del__ = lambda self : None;
    def SetCam(self, *args): return _playercpp.PtzProxy_SetCam(self, *args)
    def SetSpeed(self, aPanSpeed = 0, aTiltSpeed = 0, aZoomSpeed = 0): return _playercpp.PtzProxy_SetSpeed(self, aPanSpeed, aTiltSpeed, aZoomSpeed)
    def SelectControlMode(self, *args): return _playercpp.PtzProxy_SelectControlMode(self, *args)
    def GetPan(self): return _playercpp.PtzProxy_GetPan(self)
    def GetTilt(self): return _playercpp.PtzProxy_GetTilt(self)
    def GetZoom(self): return _playercpp.PtzProxy_GetZoom(self)
    def GetStatus(self): return _playercpp.PtzProxy_GetStatus(self)
PtzProxy_swigregister = _playercpp.PtzProxy_swigregister
PtzProxy_swigregister(PtzProxy)

class RangerProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RangerProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RangerProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_RangerProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_RangerProxy
    __del__ = lambda self : None;
    def GetElementCount(self): return _playercpp.RangerProxy_GetElementCount(self)
    def GetDevicePose(self): return _playercpp.RangerProxy_GetDevicePose(self)
    def GetDeviceSize(self): return _playercpp.RangerProxy_GetDeviceSize(self)
    def GetElementPose(self, *args): return _playercpp.RangerProxy_GetElementPose(self, *args)
    def GetElementSize(self, *args): return _playercpp.RangerProxy_GetElementSize(self, *args)
    def GetRangeCount(self): return _playercpp.RangerProxy_GetRangeCount(self)
    def GetRange(self, *args): return _playercpp.RangerProxy_GetRange(self, *args)
    def GetIntensityCount(self): return _playercpp.RangerProxy_GetIntensityCount(self)
    def GetIntensity(self, *args): return _playercpp.RangerProxy_GetIntensity(self, *args)
    def SetPower(self, *args): return _playercpp.RangerProxy_SetPower(self, *args)
    def SetIntensityData(self, *args): return _playercpp.RangerProxy_SetIntensityData(self, *args)
    def RequestGeom(self): return _playercpp.RangerProxy_RequestGeom(self)
    def Configure(self, *args): return _playercpp.RangerProxy_Configure(self, *args)
    def RequestConfigure(self): return _playercpp.RangerProxy_RequestConfigure(self)
    def GetMinAngle(self): return _playercpp.RangerProxy_GetMinAngle(self)
    def GetMaxAngle(self): return _playercpp.RangerProxy_GetMaxAngle(self)
    def GetAngularRes(self): return _playercpp.RangerProxy_GetAngularRes(self)
    def GetMinRange(self): return _playercpp.RangerProxy_GetMinRange(self)
    def GetMaxRange(self): return _playercpp.RangerProxy_GetMaxRange(self)
    def GetRangeRes(self): return _playercpp.RangerProxy_GetRangeRes(self)
    def GetFrequency(self): return _playercpp.RangerProxy_GetFrequency(self)
RangerProxy_swigregister = _playercpp.RangerProxy_swigregister
RangerProxy_swigregister(RangerProxy)

class RFIDProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RFIDProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RFIDProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_RFIDProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_RFIDProxy
    __del__ = lambda self : None;
    def GetTagsCount(self): return _playercpp.RFIDProxy_GetTagsCount(self)
    def GetRFIDTag(self, *args): return _playercpp.RFIDProxy_GetRFIDTag(self, *args)
RFIDProxy_swigregister = _playercpp.RFIDProxy_swigregister
RFIDProxy_swigregister(RFIDProxy)

class SimulationProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimulationProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimulationProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_SimulationProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_SimulationProxy
    __del__ = lambda self : None;
    def SetPose2d(self, *args): return _playercpp.SimulationProxy_SetPose2d(self, *args)
    def GetPose2d(self, *args): return _playercpp.SimulationProxy_GetPose2d(self, *args)
    def SetPose3d(self, *args): return _playercpp.SimulationProxy_SetPose3d(self, *args)
    def GetPose3d(self, *args): return _playercpp.SimulationProxy_GetPose3d(self, *args)
    def GetProperty(self, *args): return _playercpp.SimulationProxy_GetProperty(self, *args)
    def SetProperty(self, *args): return _playercpp.SimulationProxy_SetProperty(self, *args)
SimulationProxy_swigregister = _playercpp.SimulationProxy_swigregister
SimulationProxy_swigregister(SimulationProxy)

class SonarProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SonarProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SonarProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_SonarProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_SonarProxy
    __del__ = lambda self : None;
    def GetCount(self): return _playercpp.SonarProxy_GetCount(self)
    def GetScan(self, *args): return _playercpp.SonarProxy_GetScan(self, *args)
    def GetPoseCount(self): return _playercpp.SonarProxy_GetPoseCount(self)
    def GetPose(self, *args): return _playercpp.SonarProxy_GetPose(self, *args)
    def RequestGeom(self): return _playercpp.SonarProxy_RequestGeom(self)
SonarProxy_swigregister = _playercpp.SonarProxy_swigregister
SonarProxy_swigregister(SonarProxy)

class SpeechProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpeechProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpeechProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_SpeechProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_SpeechProxy
    __del__ = lambda self : None;
    def Say(self, *args): return _playercpp.SpeechProxy_Say(self, *args)
SpeechProxy_swigregister = _playercpp.SpeechProxy_swigregister
SpeechProxy_swigregister(SpeechProxy)

class SpeechRecognitionProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpeechRecognitionProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpeechRecognitionProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_SpeechRecognitionProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_SpeechRecognitionProxy
    __del__ = lambda self : None;
    def GetWord(self, *args): return _playercpp.SpeechRecognitionProxy_GetWord(self, *args)
    def GetCount(self): return _playercpp.SpeechRecognitionProxy_GetCount(self)
SpeechRecognitionProxy_swigregister = _playercpp.SpeechRecognitionProxy_swigregister
SpeechRecognitionProxy_swigregister(SpeechRecognitionProxy)

class VectorMapProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorMapProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorMapProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_VectorMapProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_VectorMapProxy
    __del__ = lambda self : None;
    def GetMapInfo(self): return _playercpp.VectorMapProxy_GetMapInfo(self)
    def GetLayerData(self, *args): return _playercpp.VectorMapProxy_GetLayerData(self, *args)
    def GetLayerCount(self): return _playercpp.VectorMapProxy_GetLayerCount(self)
    def GetLayerNames(self): return _playercpp.VectorMapProxy_GetLayerNames(self)
    def GetFeatureCount(self, *args): return _playercpp.VectorMapProxy_GetFeatureCount(self, *args)
    def GetFeatureData(self, *args): return _playercpp.VectorMapProxy_GetFeatureData(self, *args)
    def GetFeatureDataCount(self, *args): return _playercpp.VectorMapProxy_GetFeatureDataCount(self, *args)
VectorMapProxy_swigregister = _playercpp.VectorMapProxy_swigregister
VectorMapProxy_swigregister(VectorMapProxy)

class WiFiProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WiFiProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WiFiProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_WiFiProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_WiFiProxy
    __del__ = lambda self : None;
    def GetLink(self, *args): return _playercpp.WiFiProxy_GetLink(self, *args)
    def GetLinkCount(self): return _playercpp.WiFiProxy_GetLinkCount(self)
    def GetOwnIP(self): return _playercpp.WiFiProxy_GetOwnIP(self)
    def GetLinkIP(self, *args): return _playercpp.WiFiProxy_GetLinkIP(self, *args)
    def GetLinkMAC(self, *args): return _playercpp.WiFiProxy_GetLinkMAC(self, *args)
    def GetLinkESSID(self, *args): return _playercpp.WiFiProxy_GetLinkESSID(self, *args)
    def GetLinkFreq(self, *args): return _playercpp.WiFiProxy_GetLinkFreq(self, *args)
    def GetLinkMode(self, *args): return _playercpp.WiFiProxy_GetLinkMode(self, *args)
    def GetLinkEncrypt(self, *args): return _playercpp.WiFiProxy_GetLinkEncrypt(self, *args)
    def GetLinkQuality(self, *args): return _playercpp.WiFiProxy_GetLinkQuality(self, *args)
    def GetLinkLevel(self, *args): return _playercpp.WiFiProxy_GetLinkLevel(self, *args)
    def GetLinkNoise(self, *args): return _playercpp.WiFiProxy_GetLinkNoise(self, *args)
WiFiProxy_swigregister = _playercpp.WiFiProxy_swigregister
WiFiProxy_swigregister(WiFiProxy)

class WSNProxy(ClientProxy):
    __swig_setmethods__ = {}
    for _s in [ClientProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WSNProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [ClientProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WSNProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _playercpp.new_WSNProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_WSNProxy
    __del__ = lambda self : None;
    def GetNodeType(self): return _playercpp.WSNProxy_GetNodeType(self)
    def GetNodeID(self): return _playercpp.WSNProxy_GetNodeID(self)
    def GetNodeParentID(self): return _playercpp.WSNProxy_GetNodeParentID(self)
    def GetNodeDataPacket(self): return _playercpp.WSNProxy_GetNodeDataPacket(self)
    def SetDevState(self, *args): return _playercpp.WSNProxy_SetDevState(self, *args)
    def Power(self, *args): return _playercpp.WSNProxy_Power(self, *args)
    def DataType(self, *args): return _playercpp.WSNProxy_DataType(self, *args)
    def DataFreq(self, *args): return _playercpp.WSNProxy_DataFreq(self, *args)
WSNProxy_swigregister = _playercpp.WSNProxy_swigregister
WSNProxy_swigregister(WSNProxy)

PLAYER_MAX_MESSAGE_SIZE = _playercpp.PLAYER_MAX_MESSAGE_SIZE
PLAYER_MAX_DRIVER_STRING_LEN = _playercpp.PLAYER_MAX_DRIVER_STRING_LEN
PLAYER_MAX_DEVICES = _playercpp.PLAYER_MAX_DEVICES
PLAYER_MSGQUEUE_DEFAULT_MAXLEN = _playercpp.PLAYER_MSGQUEUE_DEFAULT_MAXLEN
PLAYER_IDENT_STRING = _playercpp.PLAYER_IDENT_STRING
PLAYER_IDENT_STRLEN = _playercpp.PLAYER_IDENT_STRLEN
PLAYER_KEYLEN = _playercpp.PLAYER_KEYLEN
PLAYER_MSGTYPE_DATA = _playercpp.PLAYER_MSGTYPE_DATA
PLAYER_MSGTYPE_CMD = _playercpp.PLAYER_MSGTYPE_CMD
PLAYER_MSGTYPE_REQ = _playercpp.PLAYER_MSGTYPE_REQ
PLAYER_MSGTYPE_RESP_ACK = _playercpp.PLAYER_MSGTYPE_RESP_ACK
PLAYER_MSGTYPE_SYNCH = _playercpp.PLAYER_MSGTYPE_SYNCH
PLAYER_MSGTYPE_RESP_NACK = _playercpp.PLAYER_MSGTYPE_RESP_NACK
class player_devaddr_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, player_devaddr_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, player_devaddr_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["host"] = _playercpp.player_devaddr_t_host_set
    __swig_getmethods__["host"] = _playercpp.player_devaddr_t_host_get
    if _newclass:host = _swig_property(_playercpp.player_devaddr_t_host_get, _playercpp.player_devaddr_t_host_set)
    __swig_setmethods__["robot"] = _playercpp.player_devaddr_t_robot_set
    __swig_getmethods__["robot"] = _playercpp.player_devaddr_t_robot_get
    if _newclass:robot = _swig_property(_playercpp.player_devaddr_t_robot_get, _playercpp.player_devaddr_t_robot_set)
    __swig_setmethods__["interf"] = _playercpp.player_devaddr_t_interf_set
    __swig_getmethods__["interf"] = _playercpp.player_devaddr_t_interf_get
    if _newclass:interf = _swig_property(_playercpp.player_devaddr_t_interf_get, _playercpp.player_devaddr_t_interf_set)
    __swig_setmethods__["index"] = _playercpp.player_devaddr_t_index_set
    __swig_getmethods__["index"] = _playercpp.player_devaddr_t_index_get
    if _newclass:index = _swig_property(_playercpp.player_devaddr_t_index_get, _playercpp.player_devaddr_t_index_set)
    def __init__(self): 
        this = _playercpp.new_player_devaddr_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_player_devaddr_t
    __del__ = lambda self : None;
player_devaddr_t_swigregister = _playercpp.player_devaddr_t_swigregister
player_devaddr_t_swigregister(player_devaddr_t)

def __lshift__(*args):
  return _playercpp.__lshift__(*args)
__lshift__ = _playercpp.__lshift__

class player_msghdr_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, player_msghdr_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, player_msghdr_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["addr"] = _playercpp.player_msghdr_t_addr_set
    __swig_getmethods__["addr"] = _playercpp.player_msghdr_t_addr_get
    if _newclass:addr = _swig_property(_playercpp.player_msghdr_t_addr_get, _playercpp.player_msghdr_t_addr_set)
    __swig_setmethods__["type"] = _playercpp.player_msghdr_t_type_set
    __swig_getmethods__["type"] = _playercpp.player_msghdr_t_type_get
    if _newclass:type = _swig_property(_playercpp.player_msghdr_t_type_get, _playercpp.player_msghdr_t_type_set)
    __swig_setmethods__["subtype"] = _playercpp.player_msghdr_t_subtype_set
    __swig_getmethods__["subtype"] = _playercpp.player_msghdr_t_subtype_get
    if _newclass:subtype = _swig_property(_playercpp.player_msghdr_t_subtype_get, _playercpp.player_msghdr_t_subtype_set)
    __swig_setmethods__["timestamp"] = _playercpp.player_msghdr_t_timestamp_set
    __swig_getmethods__["timestamp"] = _playercpp.player_msghdr_t_timestamp_get
    if _newclass:timestamp = _swig_property(_playercpp.player_msghdr_t_timestamp_get, _playercpp.player_msghdr_t_timestamp_set)
    __swig_setmethods__["seq"] = _playercpp.player_msghdr_t_seq_set
    __swig_getmethods__["seq"] = _playercpp.player_msghdr_t_seq_get
    if _newclass:seq = _swig_property(_playercpp.player_msghdr_t_seq_get, _playercpp.player_msghdr_t_seq_set)
    __swig_setmethods__["size"] = _playercpp.player_msghdr_t_size_set
    __swig_getmethods__["size"] = _playercpp.player_msghdr_t_size_get
    if _newclass:size = _swig_property(_playercpp.player_msghdr_t_size_get, _playercpp.player_msghdr_t_size_set)
    def __init__(self): 
        this = _playercpp.new_player_msghdr_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_player_msghdr_t
    __del__ = lambda self : None;
player_msghdr_t_swigregister = _playercpp.player_msghdr_t_swigregister
player_msghdr_t_swigregister(player_msghdr_t)

class player_point_2d_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, player_point_2d_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, player_point_2d_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["px"] = _playercpp.player_point_2d_t_px_set
    __swig_getmethods__["px"] = _playercpp.player_point_2d_t_px_get
    if _newclass:px = _swig_property(_playercpp.player_point_2d_t_px_get, _playercpp.player_point_2d_t_px_set)
    __swig_setmethods__["py"] = _playercpp.player_point_2d_t_py_set
    __swig_getmethods__["py"] = _playercpp.player_point_2d_t_py_get
    if _newclass:py = _swig_property(_playercpp.player_point_2d_t_py_get, _playercpp.player_point_2d_t_py_set)
    def __init__(self): 
        this = _playercpp.new_player_point_2d_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_player_point_2d_t
    __del__ = lambda self : None;
player_point_2d_t_swigregister = _playercpp.player_point_2d_t_swigregister
player_point_2d_t_swigregister(player_point_2d_t)

class player_point_3d_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, player_point_3d_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, player_point_3d_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["px"] = _playercpp.player_point_3d_t_px_set
    __swig_getmethods__["px"] = _playercpp.player_point_3d_t_px_get
    if _newclass:px = _swig_property(_playercpp.player_point_3d_t_px_get, _playercpp.player_point_3d_t_px_set)
    __swig_setmethods__["py"] = _playercpp.player_point_3d_t_py_set
    __swig_getmethods__["py"] = _playercpp.player_point_3d_t_py_get
    if _newclass:py = _swig_property(_playercpp.player_point_3d_t_py_get, _playercpp.player_point_3d_t_py_set)
    __swig_setmethods__["pz"] = _playercpp.player_point_3d_t_pz_set
    __swig_getmethods__["pz"] = _playercpp.player_point_3d_t_pz_get
    if _newclass:pz = _swig_property(_playercpp.player_point_3d_t_pz_get, _playercpp.player_point_3d_t_pz_set)
    def __init__(self): 
        this = _playercpp.new_player_point_3d_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_player_point_3d_t
    __del__ = lambda self : None;
player_point_3d_t_swigregister = _playercpp.player_point_3d_t_swigregister
player_point_3d_t_swigregister(player_point_3d_t)

class player_orientation_3d_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, player_orientation_3d_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, player_orientation_3d_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["proll"] = _playercpp.player_orientation_3d_t_proll_set
    __swig_getmethods__["proll"] = _playercpp.player_orientation_3d_t_proll_get
    if _newclass:proll = _swig_property(_playercpp.player_orientation_3d_t_proll_get, _playercpp.player_orientation_3d_t_proll_set)
    __swig_setmethods__["ppitch"] = _playercpp.player_orientation_3d_t_ppitch_set
    __swig_getmethods__["ppitch"] = _playercpp.player_orientation_3d_t_ppitch_get
    if _newclass:ppitch = _swig_property(_playercpp.player_orientation_3d_t_ppitch_get, _playercpp.player_orientation_3d_t_ppitch_set)
    __swig_setmethods__["pyaw"] = _playercpp.player_orientation_3d_t_pyaw_set
    __swig_getmethods__["pyaw"] = _playercpp.player_orientation_3d_t_pyaw_get
    if _newclass:pyaw = _swig_property(_playercpp.player_orientation_3d_t_pyaw_get, _playercpp.player_orientation_3d_t_pyaw_set)
    def __init__(self): 
        this = _playercpp.new_player_orientation_3d_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_player_orientation_3d_t
    __del__ = lambda self : None;
player_orientation_3d_t_swigregister = _playercpp.player_orientation_3d_t_swigregister
player_orientation_3d_t_swigregister(player_orientation_3d_t)

class player_pose2d_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, player_pose2d_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, player_pose2d_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["px"] = _playercpp.player_pose2d_t_px_set
    __swig_getmethods__["px"] = _playercpp.player_pose2d_t_px_get
    if _newclass:px = _swig_property(_playercpp.player_pose2d_t_px_get, _playercpp.player_pose2d_t_px_set)
    __swig_setmethods__["py"] = _playercpp.player_pose2d_t_py_set
    __swig_getmethods__["py"] = _playercpp.player_pose2d_t_py_get
    if _newclass:py = _swig_property(_playercpp.player_pose2d_t_py_get, _playercpp.player_pose2d_t_py_set)
    __swig_setmethods__["pa"] = _playercpp.player_pose2d_t_pa_set
    __swig_getmethods__["pa"] = _playercpp.player_pose2d_t_pa_get
    if _newclass:pa = _swig_property(_playercpp.player_pose2d_t_pa_get, _playercpp.player_pose2d_t_pa_set)
    def __init__(self): 
        this = _playercpp.new_player_pose2d_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_player_pose2d_t
    __del__ = lambda self : None;
player_pose2d_t_swigregister = _playercpp.player_pose2d_t_swigregister
player_pose2d_t_swigregister(player_pose2d_t)

class player_pose3d_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, player_pose3d_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, player_pose3d_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["px"] = _playercpp.player_pose3d_t_px_set
    __swig_getmethods__["px"] = _playercpp.player_pose3d_t_px_get
    if _newclass:px = _swig_property(_playercpp.player_pose3d_t_px_get, _playercpp.player_pose3d_t_px_set)
    __swig_setmethods__["py"] = _playercpp.player_pose3d_t_py_set
    __swig_getmethods__["py"] = _playercpp.player_pose3d_t_py_get
    if _newclass:py = _swig_property(_playercpp.player_pose3d_t_py_get, _playercpp.player_pose3d_t_py_set)
    __swig_setmethods__["pz"] = _playercpp.player_pose3d_t_pz_set
    __swig_getmethods__["pz"] = _playercpp.player_pose3d_t_pz_get
    if _newclass:pz = _swig_property(_playercpp.player_pose3d_t_pz_get, _playercpp.player_pose3d_t_pz_set)
    __swig_setmethods__["proll"] = _playercpp.player_pose3d_t_proll_set
    __swig_getmethods__["proll"] = _playercpp.player_pose3d_t_proll_get
    if _newclass:proll = _swig_property(_playercpp.player_pose3d_t_proll_get, _playercpp.player_pose3d_t_proll_set)
    __swig_setmethods__["ppitch"] = _playercpp.player_pose3d_t_ppitch_set
    __swig_getmethods__["ppitch"] = _playercpp.player_pose3d_t_ppitch_get
    if _newclass:ppitch = _swig_property(_playercpp.player_pose3d_t_ppitch_get, _playercpp.player_pose3d_t_ppitch_set)
    __swig_setmethods__["pyaw"] = _playercpp.player_pose3d_t_pyaw_set
    __swig_getmethods__["pyaw"] = _playercpp.player_pose3d_t_pyaw_get
    if _newclass:pyaw = _swig_property(_playercpp.player_pose3d_t_pyaw_get, _playercpp.player_pose3d_t_pyaw_set)
    def __init__(self): 
        this = _playercpp.new_player_pose3d_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_player_pose3d_t
    __del__ = lambda self : None;
player_pose3d_t_swigregister = _playercpp.player_pose3d_t_swigregister
player_pose3d_t_swigregister(player_pose3d_t)

class player_bbox2d_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, player_bbox2d_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, player_bbox2d_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sw"] = _playercpp.player_bbox2d_t_sw_set
    __swig_getmethods__["sw"] = _playercpp.player_bbox2d_t_sw_get
    if _newclass:sw = _swig_property(_playercpp.player_bbox2d_t_sw_get, _playercpp.player_bbox2d_t_sw_set)
    __swig_setmethods__["sl"] = _playercpp.player_bbox2d_t_sl_set
    __swig_getmethods__["sl"] = _playercpp.player_bbox2d_t_sl_get
    if _newclass:sl = _swig_property(_playercpp.player_bbox2d_t_sl_get, _playercpp.player_bbox2d_t_sl_set)
    def __init__(self): 
        this = _playercpp.new_player_bbox2d_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_player_bbox2d_t
    __del__ = lambda self : None;
player_bbox2d_t_swigregister = _playercpp.player_bbox2d_t_swigregister
player_bbox2d_t_swigregister(player_bbox2d_t)

class player_bbox3d_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, player_bbox3d_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, player_bbox3d_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sw"] = _playercpp.player_bbox3d_t_sw_set
    __swig_getmethods__["sw"] = _playercpp.player_bbox3d_t_sw_get
    if _newclass:sw = _swig_property(_playercpp.player_bbox3d_t_sw_get, _playercpp.player_bbox3d_t_sw_set)
    __swig_setmethods__["sl"] = _playercpp.player_bbox3d_t_sl_set
    __swig_getmethods__["sl"] = _playercpp.player_bbox3d_t_sl_get
    if _newclass:sl = _swig_property(_playercpp.player_bbox3d_t_sl_get, _playercpp.player_bbox3d_t_sl_set)
    __swig_setmethods__["sh"] = _playercpp.player_bbox3d_t_sh_set
    __swig_getmethods__["sh"] = _playercpp.player_bbox3d_t_sh_get
    if _newclass:sh = _swig_property(_playercpp.player_bbox3d_t_sh_get, _playercpp.player_bbox3d_t_sh_set)
    def __init__(self): 
        this = _playercpp.new_player_bbox3d_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_player_bbox3d_t
    __del__ = lambda self : None;
player_bbox3d_t_swigregister = _playercpp.player_bbox3d_t_swigregister
player_bbox3d_t_swigregister(player_bbox3d_t)

class player_blackboard_entry_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, player_blackboard_entry_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, player_blackboard_entry_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key_count"] = _playercpp.player_blackboard_entry_t_key_count_set
    __swig_getmethods__["key_count"] = _playercpp.player_blackboard_entry_t_key_count_get
    if _newclass:key_count = _swig_property(_playercpp.player_blackboard_entry_t_key_count_get, _playercpp.player_blackboard_entry_t_key_count_set)
    __swig_setmethods__["key"] = _playercpp.player_blackboard_entry_t_key_set
    __swig_getmethods__["key"] = _playercpp.player_blackboard_entry_t_key_get
    if _newclass:key = _swig_property(_playercpp.player_blackboard_entry_t_key_get, _playercpp.player_blackboard_entry_t_key_set)
    __swig_setmethods__["group_count"] = _playercpp.player_blackboard_entry_t_group_count_set
    __swig_getmethods__["group_count"] = _playercpp.player_blackboard_entry_t_group_count_get
    if _newclass:group_count = _swig_property(_playercpp.player_blackboard_entry_t_group_count_get, _playercpp.player_blackboard_entry_t_group_count_set)
    __swig_setmethods__["group"] = _playercpp.player_blackboard_entry_t_group_set
    __swig_getmethods__["group"] = _playercpp.player_blackboard_entry_t_group_get
    if _newclass:group = _swig_property(_playercpp.player_blackboard_entry_t_group_get, _playercpp.player_blackboard_entry_t_group_set)
    __swig_setmethods__["type"] = _playercpp.player_blackboard_entry_t_type_set
    __swig_getmethods__["type"] = _playercpp.player_blackboard_entry_t_type_get
    if _newclass:type = _swig_property(_playercpp.player_blackboard_entry_t_type_get, _playercpp.player_blackboard_entry_t_type_set)
    __swig_setmethods__["subtype"] = _playercpp.player_blackboard_entry_t_subtype_set
    __swig_getmethods__["subtype"] = _playercpp.player_blackboard_entry_t_subtype_get
    if _newclass:subtype = _swig_property(_playercpp.player_blackboard_entry_t_subtype_get, _playercpp.player_blackboard_entry_t_subtype_set)
    __swig_setmethods__["data_count"] = _playercpp.player_blackboard_entry_t_data_count_set
    __swig_getmethods__["data_count"] = _playercpp.player_blackboard_entry_t_data_count_get
    if _newclass:data_count = _swig_property(_playercpp.player_blackboard_entry_t_data_count_get, _playercpp.player_blackboard_entry_t_data_count_set)
    __swig_setmethods__["data"] = _playercpp.player_blackboard_entry_t_data_set
    __swig_getmethods__["data"] = _playercpp.player_blackboard_entry_t_data_get
    if _newclass:data = _swig_property(_playercpp.player_blackboard_entry_t_data_get, _playercpp.player_blackboard_entry_t_data_set)
    __swig_setmethods__["timestamp_sec"] = _playercpp.player_blackboard_entry_t_timestamp_sec_set
    __swig_getmethods__["timestamp_sec"] = _playercpp.player_blackboard_entry_t_timestamp_sec_get
    if _newclass:timestamp_sec = _swig_property(_playercpp.player_blackboard_entry_t_timestamp_sec_get, _playercpp.player_blackboard_entry_t_timestamp_sec_set)
    __swig_setmethods__["timestamp_usec"] = _playercpp.player_blackboard_entry_t_timestamp_usec_set
    __swig_getmethods__["timestamp_usec"] = _playercpp.player_blackboard_entry_t_timestamp_usec_get
    if _newclass:timestamp_usec = _swig_property(_playercpp.player_blackboard_entry_t_timestamp_usec_get, _playercpp.player_blackboard_entry_t_timestamp_usec_set)
    def __init__(self): 
        this = _playercpp.new_player_blackboard_entry_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_player_blackboard_entry_t
    __del__ = lambda self : None;
player_blackboard_entry_t_swigregister = _playercpp.player_blackboard_entry_t_swigregister
player_blackboard_entry_t_swigregister(player_blackboard_entry_t)

class player_segment_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, player_segment_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, player_segment_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x0"] = _playercpp.player_segment_t_x0_set
    __swig_getmethods__["x0"] = _playercpp.player_segment_t_x0_get
    if _newclass:x0 = _swig_property(_playercpp.player_segment_t_x0_get, _playercpp.player_segment_t_x0_set)
    __swig_setmethods__["y0"] = _playercpp.player_segment_t_y0_set
    __swig_getmethods__["y0"] = _playercpp.player_segment_t_y0_get
    if _newclass:y0 = _swig_property(_playercpp.player_segment_t_y0_get, _playercpp.player_segment_t_y0_set)
    __swig_setmethods__["x1"] = _playercpp.player_segment_t_x1_set
    __swig_getmethods__["x1"] = _playercpp.player_segment_t_x1_get
    if _newclass:x1 = _swig_property(_playercpp.player_segment_t_x1_get, _playercpp.player_segment_t_x1_set)
    __swig_setmethods__["y1"] = _playercpp.player_segment_t_y1_set
    __swig_getmethods__["y1"] = _playercpp.player_segment_t_y1_get
    if _newclass:y1 = _swig_property(_playercpp.player_segment_t_y1_get, _playercpp.player_segment_t_y1_set)
    def __init__(self): 
        this = _playercpp.new_player_segment_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_player_segment_t
    __del__ = lambda self : None;
player_segment_t_swigregister = _playercpp.player_segment_t_swigregister
player_segment_t_swigregister(player_segment_t)

class player_extent2d_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, player_extent2d_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, player_extent2d_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x0"] = _playercpp.player_extent2d_t_x0_set
    __swig_getmethods__["x0"] = _playercpp.player_extent2d_t_x0_get
    if _newclass:x0 = _swig_property(_playercpp.player_extent2d_t_x0_get, _playercpp.player_extent2d_t_x0_set)
    __swig_setmethods__["y0"] = _playercpp.player_extent2d_t_y0_set
    __swig_getmethods__["y0"] = _playercpp.player_extent2d_t_y0_get
    if _newclass:y0 = _swig_property(_playercpp.player_extent2d_t_y0_get, _playercpp.player_extent2d_t_y0_set)
    __swig_setmethods__["x1"] = _playercpp.player_extent2d_t_x1_set
    __swig_getmethods__["x1"] = _playercpp.player_extent2d_t_x1_get
    if _newclass:x1 = _swig_property(_playercpp.player_extent2d_t_x1_get, _playercpp.player_extent2d_t_x1_set)
    __swig_setmethods__["y1"] = _playercpp.player_extent2d_t_y1_set
    __swig_getmethods__["y1"] = _playercpp.player_extent2d_t_y1_get
    if _newclass:y1 = _swig_property(_playercpp.player_extent2d_t_y1_get, _playercpp.player_extent2d_t_y1_set)
    def __init__(self): 
        this = _playercpp.new_player_extent2d_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_player_extent2d_t
    __del__ = lambda self : None;
player_extent2d_t_swigregister = _playercpp.player_extent2d_t_swigregister
player_extent2d_t_swigregister(player_extent2d_t)

class player_color_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, player_color_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, player_color_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["alpha"] = _playercpp.player_color_t_alpha_set
    __swig_getmethods__["alpha"] = _playercpp.player_color_t_alpha_get
    if _newclass:alpha = _swig_property(_playercpp.player_color_t_alpha_get, _playercpp.player_color_t_alpha_set)
    __swig_setmethods__["red"] = _playercpp.player_color_t_red_set
    __swig_getmethods__["red"] = _playercpp.player_color_t_red_get
    if _newclass:red = _swig_property(_playercpp.player_color_t_red_get, _playercpp.player_color_t_red_set)
    __swig_setmethods__["green"] = _playercpp.player_color_t_green_set
    __swig_getmethods__["green"] = _playercpp.player_color_t_green_get
    if _newclass:green = _swig_property(_playercpp.player_color_t_green_get, _playercpp.player_color_t_green_set)
    __swig_setmethods__["blue"] = _playercpp.player_color_t_blue_set
    __swig_getmethods__["blue"] = _playercpp.player_color_t_blue_get
    if _newclass:blue = _swig_property(_playercpp.player_color_t_blue_get, _playercpp.player_color_t_blue_set)
    def __init__(self): 
        this = _playercpp.new_player_color_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_player_color_t
    __del__ = lambda self : None;
player_color_t_swigregister = _playercpp.player_color_t_swigregister
player_color_t_swigregister(player_color_t)

class player_bool_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, player_bool_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, player_bool_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _playercpp.player_bool_t_state_set
    __swig_getmethods__["state"] = _playercpp.player_bool_t_state_get
    if _newclass:state = _swig_property(_playercpp.player_bool_t_state_get, _playercpp.player_bool_t_state_set)
    def __init__(self): 
        this = _playercpp.new_player_bool_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_player_bool_t
    __del__ = lambda self : None;
player_bool_t_swigregister = _playercpp.player_bool_t_swigregister
player_bool_t_swigregister(player_bool_t)

class player_uint32_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, player_uint32_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, player_uint32_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _playercpp.player_uint32_t_value_set
    __swig_getmethods__["value"] = _playercpp.player_uint32_t_value_get
    if _newclass:value = _swig_property(_playercpp.player_uint32_t_value_get, _playercpp.player_uint32_t_value_set)
    def __init__(self): 
        this = _playercpp.new_player_uint32_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_player_uint32_t
    __del__ = lambda self : None;
player_uint32_t_swigregister = _playercpp.player_uint32_t_swigregister
player_uint32_t_swigregister(player_uint32_t)

PLAYER_CAPABILTIES_REQ = _playercpp.PLAYER_CAPABILTIES_REQ
class player_capabilities_req_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, player_capabilities_req_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, player_capabilities_req_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _playercpp.player_capabilities_req_t_type_set
    __swig_getmethods__["type"] = _playercpp.player_capabilities_req_t_type_get
    if _newclass:type = _swig_property(_playercpp.player_capabilities_req_t_type_get, _playercpp.player_capabilities_req_t_type_set)
    __swig_setmethods__["subtype"] = _playercpp.player_capabilities_req_t_subtype_set
    __swig_getmethods__["subtype"] = _playercpp.player_capabilities_req_t_subtype_get
    if _newclass:subtype = _swig_property(_playercpp.player_capabilities_req_t_subtype_get, _playercpp.player_capabilities_req_t_subtype_set)
    def __init__(self): 
        this = _playercpp.new_player_capabilities_req_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_player_capabilities_req_t
    __del__ = lambda self : None;
player_capabilities_req_t_swigregister = _playercpp.player_capabilities_req_t_swigregister
player_capabilities_req_t_swigregister(player_capabilities_req_t)

PLAYER_GET_INTPROP_REQ = _playercpp.PLAYER_GET_INTPROP_REQ
PLAYER_SET_INTPROP_REQ = _playercpp.PLAYER_SET_INTPROP_REQ
PLAYER_GET_DBLPROP_REQ = _playercpp.PLAYER_GET_DBLPROP_REQ
PLAYER_SET_DBLPROP_REQ = _playercpp.PLAYER_SET_DBLPROP_REQ
PLAYER_GET_STRPROP_REQ = _playercpp.PLAYER_GET_STRPROP_REQ
PLAYER_SET_STRPROP_REQ = _playercpp.PLAYER_SET_STRPROP_REQ
PLAYER_GET_BOOLPROP_REQ = _playercpp.PLAYER_GET_BOOLPROP_REQ
PLAYER_SET_BOOLPROP_REQ = _playercpp.PLAYER_SET_BOOLPROP_REQ
class player_boolprop_req_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, player_boolprop_req_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, player_boolprop_req_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key_count"] = _playercpp.player_boolprop_req_t_key_count_set
    __swig_getmethods__["key_count"] = _playercpp.player_boolprop_req_t_key_count_get
    if _newclass:key_count = _swig_property(_playercpp.player_boolprop_req_t_key_count_get, _playercpp.player_boolprop_req_t_key_count_set)
    __swig_setmethods__["key"] = _playercpp.player_boolprop_req_t_key_set
    __swig_getmethods__["key"] = _playercpp.player_boolprop_req_t_key_get
    if _newclass:key = _swig_property(_playercpp.player_boolprop_req_t_key_get, _playercpp.player_boolprop_req_t_key_set)
    __swig_setmethods__["value"] = _playercpp.player_boolprop_req_t_value_set
    __swig_getmethods__["value"] = _playercpp.player_boolprop_req_t_value_get
    if _newclass:value = _swig_property(_playercpp.player_boolprop_req_t_value_get, _playercpp.player_boolprop_req_t_value_set)
    def __init__(self): 
        this = _playercpp.new_player_boolprop_req_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_player_boolprop_req_t
    __del__ = lambda self : None;
player_boolprop_req_t_swigregister = _playercpp.player_boolprop_req_t_swigregister
player_boolprop_req_t_swigregister(player_boolprop_req_t)

class player_intprop_req_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, player_intprop_req_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, player_intprop_req_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key_count"] = _playercpp.player_intprop_req_t_key_count_set
    __swig_getmethods__["key_count"] = _playercpp.player_intprop_req_t_key_count_get
    if _newclass:key_count = _swig_property(_playercpp.player_intprop_req_t_key_count_get, _playercpp.player_intprop_req_t_key_count_set)
    __swig_setmethods__["key"] = _playercpp.player_intprop_req_t_key_set
    __swig_getmethods__["key"] = _playercpp.player_intprop_req_t_key_get
    if _newclass:key = _swig_property(_playercpp.player_intprop_req_t_key_get, _playercpp.player_intprop_req_t_key_set)
    __swig_setmethods__["value"] = _playercpp.player_intprop_req_t_value_set
    __swig_getmethods__["value"] = _playercpp.player_intprop_req_t_value_get
    if _newclass:value = _swig_property(_playercpp.player_intprop_req_t_value_get, _playercpp.player_intprop_req_t_value_set)
    def __init__(self): 
        this = _playercpp.new_player_intprop_req_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_player_intprop_req_t
    __del__ = lambda self : None;
player_intprop_req_t_swigregister = _playercpp.player_intprop_req_t_swigregister
player_intprop_req_t_swigregister(player_intprop_req_t)

class player_dblprop_req_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, player_dblprop_req_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, player_dblprop_req_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key_count"] = _playercpp.player_dblprop_req_t_key_count_set
    __swig_getmethods__["key_count"] = _playercpp.player_dblprop_req_t_key_count_get
    if _newclass:key_count = _swig_property(_playercpp.player_dblprop_req_t_key_count_get, _playercpp.player_dblprop_req_t_key_count_set)
    __swig_setmethods__["key"] = _playercpp.player_dblprop_req_t_key_set
    __swig_getmethods__["key"] = _playercpp.player_dblprop_req_t_key_get
    if _newclass:key = _swig_property(_playercpp.player_dblprop_req_t_key_get, _playercpp.player_dblprop_req_t_key_set)
    __swig_setmethods__["value"] = _playercpp.player_dblprop_req_t_value_set
    __swig_getmethods__["value"] = _playercpp.player_dblprop_req_t_value_get
    if _newclass:value = _swig_property(_playercpp.player_dblprop_req_t_value_get, _playercpp.player_dblprop_req_t_value_set)
    def __init__(self): 
        this = _playercpp.new_player_dblprop_req_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_player_dblprop_req_t
    __del__ = lambda self : None;
player_dblprop_req_t_swigregister = _playercpp.player_dblprop_req_t_swigregister
player_dblprop_req_t_swigregister(player_dblprop_req_t)

class player_strprop_req_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, player_strprop_req_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, player_strprop_req_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key_count"] = _playercpp.player_strprop_req_t_key_count_set
    __swig_getmethods__["key_count"] = _playercpp.player_strprop_req_t_key_count_get
    if _newclass:key_count = _swig_property(_playercpp.player_strprop_req_t_key_count_get, _playercpp.player_strprop_req_t_key_count_set)
    __swig_setmethods__["key"] = _playercpp.player_strprop_req_t_key_set
    __swig_getmethods__["key"] = _playercpp.player_strprop_req_t_key_get
    if _newclass:key = _swig_property(_playercpp.player_strprop_req_t_key_get, _playercpp.player_strprop_req_t_key_set)
    __swig_setmethods__["value_count"] = _playercpp.player_strprop_req_t_value_count_set
    __swig_getmethods__["value_count"] = _playercpp.player_strprop_req_t_value_count_get
    if _newclass:value_count = _swig_property(_playercpp.player_strprop_req_t_value_count_get, _playercpp.player_strprop_req_t_value_count_set)
    __swig_setmethods__["value"] = _playercpp.player_strprop_req_t_value_set
    __swig_getmethods__["value"] = _playercpp.player_strprop_req_t_value_get
    if _newclass:value = _swig_property(_playercpp.player_strprop_req_t_value_get, _playercpp.player_strprop_req_t_value_set)
    def __init__(self): 
        this = _playercpp.new_player_strprop_req_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _playercpp.delete_player_strprop_req_t
    __del__ = lambda self : None;
player_strprop_req_t_swigregister = _playercpp.player_strprop_req_t_swigregister
player_strprop_req_t_swigregister(player_strprop_req_t)

# This file is compatible with both classic and new-style classes.


